#1. 리다이렉션(>)
  - 표준 스트림이란?
    - 파일을 읽고 쓰는 과정처럼 데이터를 입출력하는 것
    - 데이터가 연속적으로 흐른다는 특징
    - 키보드 -> 운영체제 -> 디스플레이
      - stidn
      - stout
      - stderr
      - out/ err 다른 방식으로 (루트로) 출력된다.

  - 리다이렉션(redirection)이란?
    - 입출력 방향을 다른 곳으로 바꾼
    - 키보드에서 입력받지 않고 파일에서 받는 것
    - 디스플레이 => 파일로 쓰는
    예: ls -l -> 파일로 저장한다.

  - 셸의 역할이다. (운영체제와 파일을 연결하는 작업)

    1) 출력 리다이렉션
      - 출력 내용을 표준 출력이 아닌 파일로 보내 저장하는것
      - syntax: 명령 > 파일이름

## cat
  - concatenate: 연속으로 이어 붙인다.
  - cat 파일이름1, 2, 3, ...
    - 파일 1 + 2 + 3 ....
    - 파일 1 2 (순서대로 연속)
  - 하나 이상의 파일을 다른 여러 종료의 파일과 연결할 때 많이 사용한다.
    - 파일 복사, 합침, ..
    - 추가 >>


    2) 입력 리다이렉션
    - 명령 < 파일

    - wc animals: 프로그램이 파일의 존재를 알고 있음
    - wc < animals: 리다이렉션때문에 프로그램이 파일 존재 모름

    3) 리다이렉션이 불가능한 출력
    - 표준오류는 리다이렉션이 불가능하다.
    - 단, '2>'를 사용하면 리다이렉션이 가능하다.
    - 2>> :
    - 표준 출력과 오류 같이 리다이렉션하려면? &>
    
    예: 존재하는 파일과 존재하지 않는 파일 모두 읽어서 새로운 파일 만들자.
    cat line1.txt non.txt &> line2.txt
    2>> # 이어쓰기
    2> # stdout err(x)

## 4) 입출력 모두 다 같이
  - 명령 < 입력파일 > 출력파일
  Q animals.txt 에서 Perl 라인의 글자(character) 수 세고 결과를 파일로(result). 입력도 리다이렉션 (한번에)


- ls, head, echo, cat (어떤차이가 있는지 알아두기)


# 2. Escape Letters
- 특정 문자가 가지고 있는 기능을 차단하게 해주는 기능
    예: \\n, \\t $
- \ (역슬래시, 백슬래시)
- \$HOME

1) ''
  - 제일 강력한 역할
  - 안에 있는 모든 기능을 해제함
  - 예: $HOME ( 문자 그대로 출력)

2) ""
  - 일부 기능은 해제하지 않는다
  
3) \
    - 일부분을 지정해서 기능해제( 문자 그대로 읽게 함)

  - 큰 따옴표 안에 큰 따옴표 사용하려면?
  - 명령 줄 바꿔쓰기할 때 많이 쓴다.
    |\
  cut -c animals.txt \
    | grep ... \
    | head ....



- 별명 무효화 기능
  alis grep="grep -w"
  \grep

# 4 ?
  - source
  -  사용자가 자주 사용하는 환경 설정을 저장하여 항상 셸을 켤 때마다 적용되도록 한다.

# 5. 명령 히스토
  - command history 우리가 커맨드 라인에 입력한 명령들을 셀이 저장해서 가지고 있따
  - 히스토리를 사용해서 이전 명령을 불러와 재사용하는 기능을 익힌다

## 1) 히스토리 열람
  - history
  LIFO (last in first out)
  history 10

Q. 히스토리를 가장 처음부터 10개 출력하기(1-10) + 한화면에
history | head
history | head -n 10
history | sort -nr | head

Q.전체 히스토리에서 echo만 출력하기
history | grep echo
- history -c

## 2) 재사용
1. 커서링
2. 히스토리 확장
3. 증분 검색

### 1. 커서링
- 위아래 키를 사용하여 히스토리 열람
- 간단하지만 느림
- 이전 2~3개 명령일 경우 사용
- 입력한 역순으로 이전 명령을 불러옴

몇 개까찌?
- '$HISTSIZE=-1' # 무한저장

반복되는 명령은?
- '$HISTCONTROL=ignoredups' # 중복되는 명령어 하나만 저장

- 모든 명령 히스토리는 '$HISTFILE'에 저장된다.

### 2. 히스토리 확장
- 특별한 표현식을 활용하는 방법
- 명령을 가져오고 실행까지 함
- !! : 이전 명령
- !<명령어>
- !70 (히스토리 번호)
- !-3

- 장점 : 쉽다
- 단점 : 실행까지 되기 때문에 조심할 것
  - :p - 확인
  - !!
- !70:p -> !!

Q. 이전 명령의 단어 수(word) 세기(표현식 활용)
!! | wc -c
!!:p | wc -c


  - stdout 으로 활용할 수 있다는 점

- 파일 삭제할 때
  - !$ : 이전 명령의 마지막 내용
    - head grades2 ($)
    - alias rm = 'rm -i' # 삭제하기전에 확인하라
  - !* : 인수가 2개 이상일 경우 매칭

### 3. 증분 검색
- ctrl + R
- enter
- ctrl + j, c,
- ESC



- 요약
  - 명령행 편집을 효율적으로 잘하자.

!! !cp
# 1. 캐럿을 이용한 히스토리 확장
md5sum *.jp | ... | ...

^jp^jpg
<패턴>:s//from_cmd(기존)/to_cmd
!!:s/jp/jpg
!md5sum/jp/jpg